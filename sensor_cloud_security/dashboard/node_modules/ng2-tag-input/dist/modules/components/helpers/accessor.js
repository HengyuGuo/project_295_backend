var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Input } from '@angular/core';
export var TagModel = (function () {
    function TagModel(display, value) {
        this.display = display;
        this.value = value;
        this.display = display;
        this.value = value;
    }
    return TagModel;
}());
export var AutocompleteItemModel = (function (_super) {
    __extends(AutocompleteItemModel, _super);
    function AutocompleteItemModel() {
        _super.apply(this, arguments);
    }
    return AutocompleteItemModel;
}(TagModel));
;
export function isObject(obj) {
    return obj === Object(obj);
}
export var TagInputAccessor = (function () {
    function TagInputAccessor() {
        this._items = [];
        this.displayBy = 'display';
        this.identifyBy = 'value';
    }
    Object.defineProperty(TagInputAccessor.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            this._items = items;
            this._onChangeCallback(this._items);
        },
        enumerable: true,
        configurable: true
    });
    ;
    TagInputAccessor.prototype.onTouched = function (items) {
        this._onTouchedCallback(items);
    };
    TagInputAccessor.prototype.writeValue = function (items) {
        this._items = this.transformItems(items);
    };
    TagInputAccessor.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    TagInputAccessor.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    TagInputAccessor.prototype.transformItems = function (items) {
        var _this = this;
        var displayBy = this.displayBy;
        var identifyBy = this.identifyBy;
        return items ? items.map(function (item) {
            if (isObject(item)) {
                if (!item.hasOwnProperty(displayBy) || !item.hasOwnProperty(identifyBy)) {
                    throw new Error("\n                        'Please, make sure the objects have \"identifyBy\" and \"displayBy\" properties,\n                         by default these are \"value\" and \"display\", but you can pass your own as inputs\n                    ");
                }
                return new TagModel(item[_this.displayBy], item[_this.identifyBy]);
            }
            return new TagModel(item, item);
        }) : [];
    };
    TagInputAccessor.propDecorators = {
        'displayBy': [{ type: Input },],
        'identifyBy': [{ type: Input },],
    };
    return TagInputAccessor;
}());
//# sourceMappingURL=accessor.js.map