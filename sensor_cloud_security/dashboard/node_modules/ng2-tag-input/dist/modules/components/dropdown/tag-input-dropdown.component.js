import { Component, ViewChild, forwardRef, Inject, TemplateRef, ContentChildren, Input, HostListener } from '@angular/core';
import { TagInputComponent } from '../tag-input';
import { Ng2Dropdown } from 'ng2-material-dropdown';
import { AutocompleteItemModel } from '../helpers/accessor';
export var TagInputDropdown = (function () {
    function TagInputDropdown(tagInput) {
        this.tagInput = tagInput;
        this.offset = '50 0';
        this.focusFirstElement = false;
        this.showDropdownIfEmpty = false;
        this.items = [];
        this._autocompleteItems = [];
    }
    Object.defineProperty(TagInputDropdown.prototype, "autocompleteItems", {
        get: function () {
            return this._autocompleteItems;
        },
        set: function (items) {
            this._autocompleteItems = items ? items.map(function (item) {
                if (typeof item === 'string') {
                    return new AutocompleteItemModel(item, item);
                }
                else {
                    return new AutocompleteItemModel(item.display, item.value);
                }
            }) : [];
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.ngOnInit = function () {
        var _this = this;
        this.onItemClicked().subscribe(function (item) {
            _this.addNewItem(item);
        });
        this.onHide().subscribe(function () {
            _this.resetItems();
        });
        this.tagInput.inputForm.onKeyup.subscribe(function () {
            _this.show();
        });
    };
    TagInputDropdown.prototype.updatePosition = function (position) {
        return this.dropdown.menu.updatePosition(position);
    };
    Object.defineProperty(TagInputDropdown.prototype, "isVisible", {
        get: function () {
            return this.dropdown.menu.state.menuState.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.onHide = function () {
        return this.dropdown.onHide;
    };
    TagInputDropdown.prototype.onItemClicked = function () {
        return this.dropdown.onItemClicked;
    };
    Object.defineProperty(TagInputDropdown.prototype, "selectedItem", {
        get: function () {
            return this.dropdown.menu.state.dropdownState.selectedItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagInputDropdown.prototype, "state", {
        get: function () {
            return this.dropdown.menu.state;
        },
        enumerable: true,
        configurable: true
    });
    TagInputDropdown.prototype.addNewItem = function (item) {
        var _this = this;
        if (!item) {
            return;
        }
        var value = item.value.display;
        if (this.tagInput.isTagValid(value, true)) {
            this.tagInput.appendNewTag(value);
        }
        this.tagInput.setInputValue('');
        setTimeout(function () { return _this.tagInput.inputForm.focus(); }, 0);
        this.dropdown.hide();
    };
    TagInputDropdown.prototype.show = function () {
        var value = this.tagInput.inputForm.value.value;
        var position = this.tagInput.inputForm.getElementPosition();
        var items = this.getMatchingItems(value);
        var hasItems = items.length > 0;
        var showDropdownIfEmpty = this.showDropdownIfEmpty && !value && hasItems;
        this.items = items;
        if ((hasItems || showDropdownIfEmpty) && !this.isVisible) {
            this.dropdown.toggleMenu(position);
        }
        else if (!hasItems && this.isVisible) {
            this.dropdown.hide();
        }
    };
    TagInputDropdown.prototype.getMatchingItems = function (value) {
        var _this = this;
        if (!value && !this.showDropdownIfEmpty) {
            return [];
        }
        return this.autocompleteItems.filter(function (item) {
            var matchesValue = item.display.toLowerCase().indexOf(value.toLowerCase()) >= 0;
            var hasValue = !!_this.tagInput.findItem(item.display);
            return (matchesValue === true) && (hasValue === false);
        });
    };
    TagInputDropdown.prototype.resetItems = function () {
        this.items = [];
    };
    TagInputDropdown.prototype.scrollListener = function () {
        if (!this.isVisible) {
            return;
        }
        this.updatePosition(this.tagInput.inputForm.getElementPosition());
    };
    TagInputDropdown.decorators = [
        { type: Component, args: [{
                    selector: 'tag-input-dropdown',
                    templateUrl: './tag-input-dropdown.template.html'
                },] },
    ];
    TagInputDropdown.ctorParameters = function () { return [
        { type: TagInputComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return TagInputComponent; }),] },] },
    ]; };
    TagInputDropdown.propDecorators = {
        'dropdown': [{ type: ViewChild, args: [Ng2Dropdown,] },],
        'templates': [{ type: ContentChildren, args: [TemplateRef,] },],
        'offset': [{ type: Input },],
        'focusFirstElement': [{ type: Input },],
        'autocompleteItems': [{ type: Input },],
        'showDropdownIfEmpty': [{ type: Input },],
        'scrollListener': [{ type: HostListener, args: ['window:scroll',] },],
    };
    return TagInputDropdown;
}());
//# sourceMappingURL=tag-input-dropdown.component.js.map