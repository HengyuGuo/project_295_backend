import { EventEmitter, Renderer, OnInit, TemplateRef, QueryList } from '@angular/core';
import { TagInputAccessor, TagModel } from './helpers/accessor';
import { TagInputForm } from './tag-input-form/tag-input-form.component';
import { TagInputDropdown } from './dropdown/tag-input-dropdown.component';
import 'rxjs/add/operator/debounceTime';
export declare class TagInputComponent extends TagInputAccessor implements OnInit {
    private renderer;
    separatorKeys: number[];
    placeholder: string;
    secondaryPlaceholder: string;
    maxItems: number;
    readonly: boolean;
    transform: (item: string) => string;
    validators: any[];
    onlyFromAutocomplete: boolean;
    errorMessages: {
        [key: string]: string;
    };
    theme: string;
    private onTextChangeDebounce;
    private inputId;
    private inputClass;
    private clearOnBlur;
    private hideForm;
    private addOnBlur;
    private addOnPaste;
    private pasteSplitPattern;
    private blinkIfDupe;
    private removable;
    private editable;
    onAdd: EventEmitter<TagModel>;
    onRemove: EventEmitter<TagModel>;
    onSelect: EventEmitter<TagModel>;
    onFocus: EventEmitter<string>;
    onBlur: EventEmitter<string>;
    onTextChange: EventEmitter<TagModel>;
    onPaste: EventEmitter<string>;
    onValidationError: EventEmitter<string>;
    onTagEdited: EventEmitter<TagModel>;
    dropdown: TagInputDropdown;
    templates: QueryList<TemplateRef<any>>;
    inputForm: TagInputForm;
    selectedTag: TagModel;
    private tags;
    private listeners;
    constructor(renderer: Renderer);
    removeItem(item: TagModel): void;
    addItem(isFromAutocomplete?: boolean): void;
    isTagValid(value: string, isFromAutocomplete?: boolean): boolean;
    appendNewTag(item: string): void;
    selectItem(item: TagModel): void;
    findItem(value: string): TagModel;
    fireEvents(eventName: string, $event?: any): void;
    handleKeydown(data: any): void;
    setInputValue(value: string): string;
    private getControl();
    focus(applyFocus?: boolean): void;
    blur(): void;
    hasErrors(): boolean;
    isInputFocused(): boolean;
    hasCustomTemplate(): boolean;
    switchNext(item: TagModel): void;
    switchPrev(item: TagModel): void;
    private readonly maxItemsReached;
    private getTagValue(item);
    private onPasteCallback(data);
    ngOnInit(): void;
    ngAfterViewInit(): void;
}
