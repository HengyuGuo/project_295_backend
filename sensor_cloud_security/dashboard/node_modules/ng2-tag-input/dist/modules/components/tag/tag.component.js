import { Component, Input, Output, EventEmitter, ElementRef, Renderer, HostListener, ViewChild } from '@angular/core';
import { TagRipple } from './tag-ripple.component';
export var TagComponent = (function () {
    function TagComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onSelect = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onKeyDown = new EventEmitter();
        this.onTagEdited = new EventEmitter();
        this.editModeActivated = false;
        this.rippleState = 'none';
    }
    TagComponent.prototype.select = function ($event) {
        if (this.readonly) {
            return;
        }
        if ($event) {
            $event.stopPropagation();
        }
        this.focus();
        this.onSelect.emit(this.model);
    };
    TagComponent.prototype.remove = function () {
        this.onRemove.emit(this.model);
    };
    TagComponent.prototype.focus = function () {
        this.renderer.invokeElementMethod(this.element.nativeElement, 'focus');
    };
    TagComponent.prototype.keydown = function (event) {
        if (this.editModeActivated) {
            event.keyCode === 13 ? this.disableEditMode(event) : this.storeNewValue();
            return;
        }
        this.onKeyDown.emit({ event: event, model: this.model });
    };
    TagComponent.prototype.blink = function () {
        var classList = this.element.nativeElement.classList;
        classList.add('blink');
        setTimeout(function () { return classList.remove('blink'); }, 50);
    };
    TagComponent.prototype.toggleEditMode = function ($event) {
        $event.stopPropagation();
        $event.preventDefault();
        if (this.editModeActivated) {
            this.storeNewValue();
        }
        this.editModeActivated = !this.editModeActivated;
    };
    TagComponent.prototype.getContentEditableText = function () {
        return this.element.nativeElement.querySelector('[contenteditable]').innerText.trim();
    };
    TagComponent.prototype.disableEditMode = function ($event) {
        this.editModeActivated = false;
        $event.preventDefault();
    };
    TagComponent.prototype.storeNewValue = function () {
        var input = this.getContentEditableText();
        if (input !== this.model.display) {
            this.model.display = input;
            this.onTagEdited.emit(this.model);
        }
    };
    TagComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tag',
                    templateUrl: './tag.template.html',
                    styleUrls: ['./tag-component.style.scss']
                },] },
    ];
    TagComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    TagComponent.propDecorators = {
        'model': [{ type: Input },],
        'readonly': [{ type: Input },],
        'removable': [{ type: Input },],
        'editable': [{ type: Input },],
        'template': [{ type: Input },],
        'onSelect': [{ type: Output },],
        'onRemove': [{ type: Output },],
        'onBlur': [{ type: Output },],
        'onKeyDown': [{ type: Output },],
        'onTagEdited': [{ type: Output },],
        'ripple': [{ type: ViewChild, args: [TagRipple,] },],
        'keydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return TagComponent;
}());
//# sourceMappingURL=tag.component.js.map